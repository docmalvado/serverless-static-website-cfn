Parameters:
  project:
    Type: String
    Description: Project's name
    MinLength: "4"
    MaxLength: "12"
    AllowedPattern: "^([a-z0-9]+(-[a-z0-9]+)*)+$"
    ConstraintDescription: Enter a valid project name (only letters, numbers and hyphens)
  environment:
    Type: String
    Description: Project's environment
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
  cfnBucketName:
    Type: String
    Description: Bucket that store cfn modules
    MinLength: 3
    MaxLength: 63
    AllowedPattern: "(?!(^((2(5[0-5]|[0-4][0-9])|[01]?[0-9]{1,2})\\.){3}(2(5[0-5]|[0-4][0-9])|[01]?[0-9]{1,2})$|^xn--|.+-s3alias$))^[a-z0-9][a-z0-9.\\-]{1,61}[a-z0-9]$"
    ConstraintDescription: Enter a valid bucket name
  gitProvider:
    Type: String
    Description: Select git provider from list
    Default: GitHub
    AllowedValues:
      - GitHub
      - Bitbucket
      - GitHubEnterpriseServer
  frontendRepository:
    Type: String
    Description: "E.g: owner/repo_name"
    AllowedPattern: "^([\\w,\\-,\\_]+)/([\\w,\\-,\\_]+)$"
    ConstraintDescription: Enter a valid repo
  repositoryBranch:
    Type: String
    Default: main
    Description: Branch to deploy
    AllowedPattern: "^(?!/|.*(?:[/.]\\.|//|@\\{|\\\\))[^\\0400177~^:?*\\[]+(?<!\\.lock)(?<![/.])$"
    ConstraintDescription: Enter a valid branch name
  startPipelineOnChange:
    Type: String
    Description: "Automatically start pipeline on commit"
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  buildInstanceComputeType:
    Type: String
    Default: BUILD_GENERAL1_SMALL
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
      - BUILD_GENERAL1_2XLARGE
  frontendSubdomain:
    Type: String
    Description: "Subdomain for the frontend, E.g: www"
    Default: www
    MinLength: "1"
    AllowedPattern: "^[a-z0-9]{1,}$"
    ConstraintDescription: Enter valid subdomain (only letters and numbers, no spaces, no special characters)
  rootHostedZoneName:
    Type: String
    Description: "E.g: mysite.com (Must exist in Route53)"
    MinLength: "6"
    AllowedPattern: "^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$"
    ConstraintDescription: Enter a valid domain name
  rootHostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: "Existing hosted zone id"
  useEnvironmentSubdomain:
    Type: String
    Description: "E.g: dev.mysite.com | qa.mysite.com (just apply for no-prod environments)"
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Project Information
        Parameters:
          - project
          - environment
      - Label:
          default: Repo information
        Parameters:
          - gitProvider
          - frontendRepository
          - repositoryBranch
      - Label:
          default: Deploy information
        Parameters:
          - buildInstanceComputeType
          - startPipelineOnChange
      - Label:
          default: Domain information
        Parameters:
          - rootHostedZoneName
          - rootHostedZoneId
          - frontendSubdomain
          - useEnvironmentSubdomain
      - Label:
          default: CFN information
        Parameters:
          - cfnBucketName
    ParameterLabels:
      project:
        default: "Project's name:"
      environment:
        default: "Project's environment:"
      cfnBucketName:
        default: "Cloudformation bucket:"
      gitProvider:
        default: "Git provider:"
      frontendRepository:
        default: "Website repository:"
      repositoryBranch:
        default: "Repository branch:"
      buildInstanceComputeType:
        default: "Build instance Compute type:"
      startPipelineOnChange:
        default: "Start pipeline on change?"
      frontendSubdomain:
        default: "Website subdomain:"
      rootHostedZoneName:
        default: "Root hosted zone (domain) name:"
      rootHostedZoneId:
        default: "Root hosted zone id:"
      useEnvironmentSubdomain:
        default: "Create environment subdomain:"
Conditions:
  isNonProd: !Not 
    - !Equals 
      - !Ref environment
      - prod
  isProd: !Equals 
    - !Ref environment
    - prod
  useEnvSubdomain: !Equals 
    - !Ref useEnvironmentSubdomain
    - "true"
  createHostedZone: !And 
    - !Condition isNonProd
    - !Condition useEnvSubdomain
Resources:
  WebsiteBucket:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/modules/s3.yml
      Parameters: 
        bucketName: !Sub ${project}-${environment}-website-${frontendSubdomain}-${AWS::Region}

  PipelineBucket:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/modules/s3.yml
      Parameters: 
        bucketName: !Sub ${project}-${environment}-pipeline-${frontendSubdomain}-${AWS::Region}

  HostedZone:
    Type: AWS::CloudFormation::Stack
    Condition: createHostedZone
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/modules/route53.yml
      Parameters: 
        hostedZoneName: !Sub '${environment}.${rootHostedZoneName}'
        parentHostedZoneId: !Ref rootHostedZoneId
  
  Certificate:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/modules/acm.yml
      Parameters: 
        hostedZoneName: !If [createHostedZone, !Sub '${environment}.${rootHostedZoneName}', !Ref rootHostedZoneName]
        hostedZoneId: !If [createHostedZone, !GetAtt HostedZone.Outputs.hostedZoneId, !Ref rootHostedZoneId]

  GitConnection:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/modules/codestar.yml
      Parameters: 
        project: !Ref project
        environment: !Ref environment
        gitProvider: !Ref gitProvider

  Distribution:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/modules/cloudfront.yml
      Parameters: 
        bucketName: !GetAtt WebsiteBucket.Outputs.bucketName
        bucketDomainName: !GetAtt WebsiteBucket.Outputs.bucketDomainName
        domain: !If [createHostedZone, !Sub '${environment}.${rootHostedZoneName}', !Ref rootHostedZoneName]
        subdomain: !Ref frontendSubdomain
        hostedZoneId: !If [createHostedZone, !GetAtt HostedZone.Outputs.hostedZoneId, !Ref rootHostedZoneId]
        certificateARN: !GetAtt Certificate.Outputs.certificateARN

  Pipeline:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub https://s3.amazonaws.com/${cfnBucketName}/${project}/modules/pipeline/main.yml
      Parameters: 
        project: !Ref project
        environment: !Ref environment
        subdomain: !Ref frontendSubdomain
        automaticDeploy: !Ref startPipelineOnChange
        cfnBucketName: !Ref cfnBucketName
        frontendRepository: !Ref frontendRepository
        repositoryBranch: !Ref repositoryBranch
        deploymentBucketName: !GetAtt WebsiteBucket.Outputs.bucketName
        artifactsBucketName: !GetAtt PipelineBucket.Outputs.bucketName
        gitConnectionARN: !GetAtt GitConnection.Outputs.gitConnectionARN
        buildInstanceComputeType: !Ref buildInstanceComputeType